import java.util.Hashtable;

public class MemoryAccess {
	/*
	 * Beq
If R(rs)==R(rt)
Pc=Pc+4+BranchAddr where branchadr is signextend


You have to let the control signals decide if it's gonna use the memory or not.

For example, if MemWrite and MemRead are false then you don't call the memory stage.
	 */
	
	
	/*
	 * This is actually the behaviour of the Memory. So, in order to get to know the address we are willing to access in the memory, 
	 * we use the result of adding the base address to the offset which is generated by the ALU. The readdata2 (taken as input) is 
	 * the data we are interested in when we are writing to the memory 
	 * and this value is the output of the method InstDecode. Finally, we need to set the corresponding signals for memory accessing.
	 */
	
	DataMemory DM;
	
	public MemoryAccess() {
		DM = new DataMemory(256);
		DM.loadValues();
	}
	
	
	
	public Hashtable<String, Integer> MemAccess(int ALUResult, int readData2, String SignExtend, String ZeroFlag, int branchAddressResult, 
			String MemWrite, String MemRead, String Branch){
		//output ALUresult and readdata2 to see in WB which will be written back to register.
	}

}
